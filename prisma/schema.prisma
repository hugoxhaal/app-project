generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  fullName      String
  password      String
  Roles         Roles           @relation(fields: [rolId], references: [id])
  rolId         Int
  isActive      Boolean         @default(true)
  createdDt     DateTime        @default(now())
  createdBy     String
  updatedDt     DateTime?
  updatedBy     String?
  Inscriptions  Inscriptions[]
  Califications Califications[]
}

model Roles {
  id        Int       @id @default(autoincrement())
  rolName   String    @unique
  Users     Users[]
  createdDt DateTime  @default(now())
  createdBy String
  updatedDt DateTime?
  updatedBy String?
}

model Students {
  id            Int             @id @default(autoincrement())
  studentName   String
  cedula        String          @unique
  isActive      Boolean         @default(true)
  createdDt     DateTime        @default(now())
  createdBy     String
  updatedDt     DateTime?
  updatedBy     String?
  Inscriptions  Inscriptions[]
  Califications Califications[]
}

model Periods {
  id           Int            @id @default(autoincrement())
  periodYear   DateTime
  period       String
  semester     Int
  isActive     Boolean        @default(true)
  isClosed     Boolean        @default(false)
  Subjects     Subjects[]
  createdDt    DateTime       @default(now())
  createdBy    String
  updatedDt    DateTime?
  updatedBy    String?
  Inscriptions Inscriptions[]

  @@unique([periodYear, period, semester])
}

model Subjects {
  id            Int             @id @default(autoincrement())
  subjectName   String
  Periods       Periods         @relation(fields: [periodId], references: [id])
  periodId      Int
  createdDt     DateTime        @default(now())
  createdBy     String
  updatedDt     DateTime?
  updatedBy     String?
  Califications Califications[]

  @@unique([subjectName, periodId])
}

model Inscriptions {
  id        Int       @id @default(autoincrement())
  Students  Students  @relation(fields: [studentId], references: [id])
  studentId Int
  Users     Users     @relation(fields: [userId], references: [id])
  userId    Int
  Periods   Periods   @relation(fields: [periodId], references: [id])
  periodId  Int
  createdDt DateTime  @default(now())
  createdBy String
  updatedDt DateTime?
  updatedBy String?

  @@unique([periodId, studentId])
}

model Califications {
  id           Int       @id @default(autoincrement())
  calification Int
  Subjects     Subjects  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId    Int
  Students     Students  @relation(fields: [studentId], references: [id])
  studentId    Int
  Users        Users     @relation(fields: [userId], references: [id])
  userId       Int
  createdDt    DateTime  @default(now())
  createdBy    String
  updatedDt    DateTime?
  updatedBy    String?
}
